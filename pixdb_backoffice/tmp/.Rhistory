p <- plot_ly(geneData.df, x = ~order, y = ~log2FC, color = ~factor(comparison), colors = c("bisque4","darkred","darkgoldenrod","green","red"), name = ~comparison, type = 'bar', orientation = 'horizontal', marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
layout(
title = "",
xaxis = list(title = ""),
yaxis = list(title = paste0(gene, " log2 fold-change")),
margin = list(l=70, r=50, b=250, t=50, pad=4),
autosize = F
)
p
p <- plot_ly(geneData.df, x = ~order, y = ~base, color = ~factor(comparison), colors = c("bisque4","darkred","darkgoldenrod","green","red"), name = ~comparison, type = 'bar', orientation = 'horizontal', marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
layout(
title = "",
xaxis = list(title = ""),
yaxis = list(title = paste0(gene, " log2 fold-change")),
margin = list(l=70, r=50, b=250, t=50, pad=4),
autosize = F
)
p
p <- plot_ly(geneData.df, x = ~order, y = ~base, color = ~factor(comparison), colors = c("bisque4","darkred","darkgoldenrod","green","red"), name = ~comparison, type = 'bar', orientation = 'horizontal', marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
add_trace( y = ~log2FC, marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
#layout(title = "", xaxis = list( tickfont = list(size = 10), title = ""), yaxis = list(title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=150, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
layout(
title = "",
xaxis = list(title = ""),
yaxis = list(title = paste0(gene, " log2 fold-change")),
margin = list(l=70, r=50, b=250, t=50, pad=4),
autosize = F
)
p
p <- plot_ly(geneData.df, x = ~order, y = ~base, color = ~factor(comparison), colors = c("bisque4","darkred","darkgoldenrod","green","red"), name = ~comparison, type = 'bar', orientation = 'horizontal', marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
add_trace( y = ~log2FC, color = ~factor(comparison), marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
#layout(title = "", xaxis = list( tickfont = list(size = 10), title = ""), yaxis = list(title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=150, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
layout(
title = "",
xaxis = list(title = ""),
yaxis = list(title = paste0(gene, " log2 fold-change")),
margin = list(l=70, r=50, b=250, t=50, pad=4),
autosize = F
)
p
p <- plot_ly(geneData.df, x = ~order, y = ~base, name = ~comparison, type = 'bar', orientation = 'horizontal', marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
add_trace( y = ~log2FC, color = ~factor(comparison), colors = c("bisque4","darkred","darkgoldenrod","green","red"), marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
#layout(title = "", xaxis = list( tickfont = list(size = 10), title = ""), yaxis = list(title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=150, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
layout(
title = "",
xaxis = list(title = ""),
yaxis = list(title = paste0(gene, " log2 fold-change")),
margin = list(l=70, r=50, b=250, t=50, pad=4),
autosize = F
)
p
p <- plot_ly(geneData.df, x = ~order, y = ~base, color = ~factor(comparison), colors = c("bisque4","darkred","darkgoldenrod","green","red"), name = ~comparison, type = 'bar', orientation = 'horizontal', marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
add_trace( y = ~log2FC, marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
#layout(title = "", xaxis = list( tickfont = list(size = 10), title = ""), yaxis = list(title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=150, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
layout(
title = "",
xaxis = list(title = ""),
yaxis = list(title = paste0(gene, " log2 fold-change")),
margin = list(l=70, r=50, b=250, t=50, pad=4),
autosize = F,
barmode = 'stack'
)
p
p <- plot_ly(geneData.df, x = ~order, y = ~base, type = 'bar', orientation = 'horizontal', marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
add_trace( y = ~log2FC, marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
#layout(title = "", xaxis = list( tickfont = list(size = 10), title = ""), yaxis = list(title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=150, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
layout(
title = "",
xaxis = list(title = ""),
yaxis = list(title = paste0(gene, " log2 fold-change")),
margin = list(l=70, r=50, b=250, t=50, pad=4),
autosize = F
)
p
p <- plot_ly(geneData.df, x = ~order, y = ~base, type = 'bar', orientation = 'horizontal', marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
add_trace( y = ~log2FC, color = ~factor(comparison), colors = c("bisque4","darkred","darkgoldenrod","green","red"), name = ~comparison, marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
#layout(title = "", xaxis = list( tickfont = list(size = 10), title = ""), yaxis = list(title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=150, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
layout(
title = "",
xaxis = list(title = ""),
yaxis = list(title = paste0(gene, " log2 fold-change")),
margin = list(l=70, r=50, b=250, t=50, pad=4),
autosize = F
)
p
p <- plot_ly(geneData.df, x = ~order, y = ~base, color = ~factor(comparison), colors = c("bisque4","darkred","darkgoldenrod","green","red"), name = ~comparison, type = 'bar', orientation = 'horizontal', marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
layout(
title = "",
xaxis = list(title = ""),
yaxis = list(title = paste0(gene, " log2 fold-change")),
margin = list(l=70, r=50, b=250, t=50, pad=4),
autosize = F
)
p
p <- plot_ly(geneData.df, x = ~order, y = ~base, color = ~factor(comparison), colors = c("bisque4","darkred","darkgoldenrod","green","red"), name = ~comparison, type = 'bar', orientation = 'horizontal', marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
add_trace( y = ~log2FC, color = ~factor(comparison), colors = c("bisque4","darkred","darkgoldenrod","green","red"), name = ~comparison,  marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
#layout(title = "", xaxis = list( tickfont = list(size = 10), title = ""), yaxis = list(title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=150, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
layout(
title = "",
xaxis = list(title = ""),
yaxis = list(title = paste0(gene, " log2 fold-change")),
margin = list(l=70, r=50, b=250, t=50, pad=4),
autosize = F
)
p
p <- plot_ly(geneData.df, x = ~order, y = ~basetype = 'bar', orientation = 'horizontal', marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
p <- plot_ly(geneData.df, x = ~order, y = ~base,  type = 'bar', orientation = 'horizontal', marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
layout(
title = "",
xaxis = list(title = ""),
yaxis = list(title = paste0(gene, " log2 fold-change")),
margin = list(l=70, r=50, b=250, t=50, pad=4),
autosize = F
)
p
p <- plot_ly(geneData.df, x = ~order, y = ~base,  type = 'bar', orientation = 'horizontal', marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
add_trace( y = ~order, marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
#layout(title = "", xaxis = list( tickfont = list(size = 10), title = ""), yaxis = list(title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=150, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
layout(
title = "",
xaxis = list(title = ""),
yaxis = list(title = paste0(gene, " log2 fold-change")),
margin = list(l=70, r=50, b=250, t=50, pad=4),
autosize = F
)
p
p <- plot_ly(geneData.df, x = ~order, y = ~base,  type = 'bar', orientation = 'horizontal', marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
add_trace( y = ~order, marker = list(line = list(color = 'rgba(0, 0, 0, 0.4)', width = 1)), width = 800, height = 600)  %>%
#layout(title = "", xaxis = list( tickfont = list(size = 10), title = ""), yaxis = list(title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=150, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
layout(
title = "",
xaxis = list(title = ""),
yaxis = list(title = paste0(gene, " log2 fold-change")),
margin = list(l=70, r=50, b=250, t=50, pad=4),
autosize = F,
barmode = 'stack'
)
p
q()
##### Clear workspace
rm(list=ls())
##### Close any open graphics devices
graphics.off()
#===============================================================================
#    Functions
#===============================================================================
##### Prepare object to write into a file
prepare2write <- function (x) {
x2write <- cbind(rownames(x), x)
colnames(x2write) <- c("",colnames(x))
return(x2write)
}
##### Assign colours to analysed groups
getTargetsColours <- function(targets) {
##### Predefined selection of colours for groups
targets.colours <- c("red","blue","green","darkgoldenrod","darkred","deepskyblue")
f.targets <- factor(targets)
vec.targets <- targets.colours[1:length(levels(f.targets))]
targets.colour <- rep(0,length(f.targets))
for(i in 1:length(f.targets))
targets.colour[i] <- vec.targets[ f.targets[i]==levels(f.targets)]
return( list(vec.targets, targets.colour) )
}
##### Create 'not in' operator
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
##### Retrieve gene annotation information
annotGenes <- function (topGenes) {
mart = useMart("ensembl", dataset="hsapiens_gene_ensembl")
#genesAnnot <- getGene( id=rownames(topGenes), type="ensembl_gene_id", mart = mart)  ##### Currently does not work
genesAnnot <- getBM(c("ensembl_gene_id","hgnc_symbol","description","chromosome_name","band","strand","start_position","end_position"), "ensembl_gene_id", rownames(topGenes), mart = mart)
genesAnnotUnique <- unique(genesAnnot$ensembl_gene_id)
annotated <- NULL
for (j in 1:length(genesAnnotUnique)) {
annotated <- rbind(annotated, c(genesAnnot[genesAnnot$ensembl_gene_id %in% genesAnnotUnique[j], 1:8], topGenes[genesAnnotUnique[j],]) )
}
rownames(annotated) <- annotated[,"ensembl_gene_id"]
##### Add not annotated genes
notAnnotated <- topGenes[rownames(topGenes) %!in% genesAnnot$ensembl_gene_id,]
notAnnotated <- cbind(as.data.frame(matrix(NA,nrow(notAnnotated),8)), notAnnotated)
colnames(notAnnotated) <- colnames(annotated)
annotated <- as.matrix(rbind(annotated, notAnnotated))
return(annotated[,2:ncol(annotated)])
}
#===============================================================================
#    Load libraries
#===============================================================================
library(sva)
library(limma)
library(gplots)
library(biomaRt)
library(edgeR)
source("a2R_code.R")
q()
# silent warnings
options(warn=-1)
##### Clear workspace
rm(list=ls())
##### Close any open graphics devices
graphics.off()
#===============================================================================
#    Functions
#===============================================================================
##### Create 'not in' operator
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
##### Assign colours to analysed groups (for plots filling)
getTargetsColours <- function(targets) {
##### Predefined selection of colours for groups
targets.colours <- c("red","blue","green","darkgoldenrod","darkred","deepskyblue", "coral", "cornflowerblue", "chartreuse4", "bisque4", "chocolate3", "cadetblue3", "darkslategrey", "lightgoldenrod4", "mediumpurple4", "orangered3","indianred1","blueviolet","darkolivegreen4","darkgoldenrod4","firebrick3","deepskyblue4", "coral3", "dodgerblue1", "chartreuse3", "bisque3", "chocolate4", "cadetblue", "darkslategray4", "lightgoldenrod3", "mediumpurple3", "orangered1")
f.targets <- factor(targets)
vec.targets <- targets.colours[1:length(levels(f.targets))]
targets.colour <- rep(0,length(f.targets))
for(i in 1:length(f.targets))
targets.colour[i] <- vec.targets[ f.targets[i]==levels(f.targets)]
return( list(vec.targets, targets.colour) )
}
#===============================================================================
#    Load libraries
#===============================================================================
suppressMessages(library(plotly))
suppressMessages(library(optparse))
expFile="/Library/WebServer/Documents/PIXdb/pixdb_backoffice/data/GSE41408_23319146/norm_files/41408_1.processed.genename.csv"
annFile="/Library/WebServer/Documents/PIXdb/pixdb_backoffice/data/GSE41408_23319146/target.txt"
target="target"
target="Target"
order=""
gene="TP53"
outFolder="/Library/WebServer/Documents/PIXdb/pixdb_backoffice/tmp"
hexcode="50t9s"
gene = make.names(gene)
# splitting exp_file string to retrieve all the identified samples
exp_files = unlist(strsplit(expFile, ","))
##### Read sample annotation file
annData <- read.table(annFile,sep="\t",as.is=TRUE,header=TRUE)
annData$File_name <- make.names(annData$File_name)
j
j=1
#ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
ef = exp_files[j]
##### Read file with expression data
expData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
##### Deal with the duplicated genes
if( nrow(expData) != 0 ) {
rownames(expData) = make.names(expData$Gene.name, unique=TRUE)
expData <- expData[,-1]
selected_samples <- intersect(as.character(annData$File_name),colnames(expData))
expData.subset <- as.data.frame(t(scale(t(data.matrix(expData[,colnames(expData) %in% selected_samples])))))
if ( gene %in% rownames(expData.subset) ) {
if (j == 1) {
gene.expr <- expData.subset[gene, ]
} else {
gene.expr <- cbind(gene.expr, expData.subset[gene, ])
}
}
##### Remove samples from platfrom for which the data cannot be processed
} else {
annData <- annData[ annData$File_name %!in% colnames(expData),  ]
}
View(annData)
##### Make sure that the annotation contains info only about samples in the data matrix
annData <- annData[ annData$File_name %in% colnames(gene.expr),  ]
##### Make sure that the samples order is the same in the annotation file and in the data matrix
gene.expr <- gene.expr[ annData$File_name ]
##### Change working directory to the project workspace
setwd(outFolder)
targets <- annData[,target]
targets.colour <- getTargetsColours(targets)
##### Order samples accordingly to investigated groups
dataByGroups <- NULL
targetByGroups <- NULL
colourByGroups <- NULL
expr <- list()
averegeExpr <- NULL
targets
for (i in 1:length(unique(targets))) {
##### Separate samples accordingly to investigated groups
expr.tmp <- gene.expr[ targets %in% unique(sort(targets))[i] ]
averegeExpr <- c(averegeExpr, rep(mean(as.numeric(expr.tmp)), length(expr.tmp)))
colour <- targets.colour[[2]][ targets %in% unique(sort(targets))[i] ]
##### Order samples within each group based on the expression level
expr.tmp <- expr.tmp[order(expr.tmp)]
colour <- colour[order(expr.tmp)]
expr[[i]] <- as.numeric(expr.tmp)
names(expr)[[i]] <- unique(sort(targets))[i]
dataByGroups <- c(dataByGroups, expr.tmp)
targetByGroups <- c(targetByGroups, targets[ targets %in% unique(sort(targets))[i] ])
colourByGroups <- c(colourByGroups, colour)
}
View(expData.subset)
View(expData)
View(gene.expr)
dataByGroups
dataByGroups <- unlist(dataByGroups)
dataByGroups
##### Generate box-plot  (PLOTLY)
##### Prepare data frame
gene.expr.df <- data.frame(targets, as.numeric(gene.expr))
colnames(gene.expr.df) <- c("Group", "Expression")
order
order = unlist(strsplit(order, ","))
order
gene.expr.df$Group <- factor(gene.expr.df$Group, levels=order)
p <- plot_ly(gene.expr.df, y= ~Expression, color = ~Group, type = 'box', jitter = 0.3, pointpos = 0, boxpoints = 'all', colors = targets.colour[[1]], width = 800, height = 600) %>%
layout(yaxis = list( title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
##### Save the box-plot as html (PLOTLY)
htmlwidgets::saveWidget(as_widget(p), paste0(hexcode,"_box.html"), selfcontained = FALSE)
##### Generate bar-plot (PLOTLY)
##### Prepare data frame
dataByGroups.df <- data.frame(targetByGroups, names(dataByGroups), as.numeric(dataByGroups))
colnames(dataByGroups.df) <- c("Group","Sample", "Expression")
##### Apply defined group order
dataByGroups.df$Group <- factor(dataByGroups.df$Group, levels=order)
dataByGroups.df <- dataByGroups.df[ order(dataByGroups.df$Group), ]
##### The default order will be alphabetized unless specified as below
dataByGroups.df$Sample <- factor(dataByGroups.df$Sample, levels = dataByGroups.df[["Sample"]])
p <- plot_ly(dataByGroups.df, x = ~Sample, y = ~Expression, color = ~Group, type = 'bar', colors = targets.colour[[1]], width = 800, height = 400) %>%
layout(title = "", xaxis = list( tickfont = list(size = 10), title = ""), yaxis = list(title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=150, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
p
p <- plot_ly(gene.expr.df, y= ~Expression, color = ~Group, type = 'box', jitter = 0.3, pointpos = 0, boxpoints = 'all', colors = targets.colour[[1]], width = 800, height = 600) %>%
layout(yaxis = list( title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
p
factor(gene.expr.df$Group, levels=order)
order
is.na(order)
exist(order)
exists((order))
exists(order)
exists(order, mode="any")
identical(order, "")
identical(order, "character(0)")
identical(order, character(0))
order="Normal,HGPIN,Tumour,Tumour_met,Metastasis"
gene = make.names(gene)
# splitting exp_file string to retrieve all the identified samples
exp_files = unlist(strsplit(expFile, ","))
##### Read sample annotation file
annData <- read.table(annFile,sep="\t",as.is=TRUE,header=TRUE)
annData$File_name <- make.names(annData$File_name)
for (j in 1:length(exp_files)) {
#ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
ef = exp_files[j]
##### Read file with expression data
expData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
##### Deal with the duplicated genes
if( nrow(expData) != 0 ) {
rownames(expData) = make.names(expData$Gene.name, unique=TRUE)
expData <- expData[,-1]
selected_samples <- intersect(as.character(annData$File_name),colnames(expData))
expData.subset <- as.data.frame(t(scale(t(data.matrix(expData[,colnames(expData) %in% selected_samples])))))
if ( gene %in% rownames(expData.subset) ) {
if (j == 1) {
gene.expr <- expData.subset[gene, ]
} else {
gene.expr <- cbind(gene.expr, expData.subset[gene, ])
}
}
##### Remove samples from platfrom for which the data cannot be processed
} else {
annData <- annData[ annData$File_name %!in% colnames(expData),  ]
}
}
##### Make sure that the annotation contains info only about samples in the data matrix
annData <- annData[ annData$File_name %in% colnames(gene.expr),  ]
##### Make sure that the samples order is the same in the annotation file and in the data matrix
gene.expr <- gene.expr[ annData$File_name ]
##### Change working directory to the project workspace
setwd(outFolder)
targets <- annData[,target]
targets.colour <- getTargetsColours(targets)
##### Order samples accordingly to investigated groups
dataByGroups <- NULL
targetByGroups <- NULL
colourByGroups <- NULL
expr <- list()
averegeExpr <- NULL
for (i in 1:length(unique(targets))) {
##### Separate samples accordingly to investigated groups
expr.tmp <- gene.expr[ targets %in% unique(sort(targets))[i] ]
averegeExpr <- c(averegeExpr, rep(mean(as.numeric(expr.tmp)), length(expr.tmp)))
colour <- targets.colour[[2]][ targets %in% unique(sort(targets))[i] ]
##### Order samples within each group based on the expression level
expr.tmp <- expr.tmp[order(expr.tmp)]
colour <- colour[order(expr.tmp)]
expr[[i]] <- as.numeric(expr.tmp)
names(expr)[[i]] <- unique(sort(targets))[i]
dataByGroups <- c(dataByGroups, expr.tmp)
targetByGroups <- c(targetByGroups, targets[ targets %in% unique(sort(targets))[i] ])
colourByGroups <- c(colourByGroups, colour)
}
dataByGroups <- unlist(dataByGroups)
##### Generate box-plot  (PLOTLY)
##### Prepare data frame
gene.expr.df <- data.frame(targets, as.numeric(gene.expr))
colnames(gene.expr.df) <- c("Group", "Expression")
##### Apply defined group order
order = unlist(strsplit(order, ","))
gene.expr.df$Group <- factor(gene.expr.df$Group, levels=order)
p <- plot_ly(gene.expr.df, y= ~Expression, color = ~Group, type = 'box', jitter = 0.3, pointpos = 0, boxpoints = 'all', colors = targets.colour[[1]], width = 800, height = 600) %>%
layout(yaxis = list( title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
p
targets.colour
p <- plot_ly(gene.expr.df, y= ~Expression, color = ~Group, type = 'box', jitter = 0.3, pointpos = 0, boxpoints = 'all', colors = targets.colour[[1]], width = 800, height = 600) %>%
layout(yaxis = list( title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
p
targets.colour
p <- plot_ly(dataByGroups.df, x = ~Sample, y = ~Expression, color = ~Group, type = 'bar', width = 800, height = 400) %>%
layout(title = "", xaxis = list( tickfont = list(size = 10), title = ""), yaxis = list(title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=150, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
p
View(dataByGroups.df)
p <- plot_ly(gene.expr.df, y= ~Expression, color = ~Group, type = 'box', jitter = 0.3, pointpos = 0, boxpoints = 'all', width = 800, height = 600) %>%
layout(yaxis = list( title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
p
targets.colour[[1]]
p <- plot_ly(gene.expr.df, y= ~Expression, color = ~Group, type = 'box', jitter = 0.3, pointpos = 0, boxpoints = 'all', colors = c("red","blue"), width = 800, height = 600) %>%
layout(yaxis = list( title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
p
p <- plot_ly(gene.expr.df, y= ~Expression, color = ~Group, type = 'box', jitter = 0.3, pointpos = 0, boxpoints = 'all', colors = c("blue","blue"), width = 800, height = 600) %>%
layout(yaxis = list( title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
p
p <- plot_ly(gene.expr.df, y= ~Expression, color = ~Group, type = 'box', jitter = 0.3, pointpos = 0, boxpoints = 'all', colors = c("blue","red"), width = 800, height = 600) %>%
layout(yaxis = list( title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
p
p <- plot_ly(gene.expr.df, y= ~Expression, color = ~Group, type = 'box', jitter = 0.3, pointpos = 0, boxpoints = 'all', colors = c("red","red"), width = 800, height = 600) %>%
layout(yaxis = list( title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
p
gene.expr.df$Group
factor(gene.expr.df$Group, levels=order)
length(factor(gene.expr.df$Group, levels=order))
dim(gene.expr.df)
gene.expr.df
View(gene.expr.df)
unlist(strsplit(order, ","))
order = unlist(strsplit(order, ","))
order
gene.expr.df$Group
levels(gene.expr.df$Group)
gene = make.names(gene)
# splitting exp_file string to retrieve all the identified samples
exp_files = unlist(strsplit(expFile, ","))
##### Read sample annotation file
annData <- read.table(annFile,sep="\t",as.is=TRUE,header=TRUE)
annData$File_name <- make.names(annData$File_name)
for (j in 1:length(exp_files)) {
#ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
ef = exp_files[j]
##### Read file with expression data
expData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
##### Deal with the duplicated genes
if( nrow(expData) != 0 ) {
rownames(expData) = make.names(expData$Gene.name, unique=TRUE)
expData <- expData[,-1]
selected_samples <- intersect(as.character(annData$File_name),colnames(expData))
expData.subset <- as.data.frame(t(scale(t(data.matrix(expData[,colnames(expData) %in% selected_samples])))))
if ( gene %in% rownames(expData.subset) ) {
if (j == 1) {
gene.expr <- expData.subset[gene, ]
} else {
gene.expr <- cbind(gene.expr, expData.subset[gene, ])
}
}
##### Remove samples from platfrom for which the data cannot be processed
} else {
annData <- annData[ annData$File_name %!in% colnames(expData),  ]
}
}
##### Make sure that the annotation contains info only about samples in the data matrix
annData <- annData[ annData$File_name %in% colnames(gene.expr),  ]
##### Make sure that the samples order is the same in the annotation file and in the data matrix
gene.expr <- gene.expr[ annData$File_name ]
##### Change working directory to the project workspace
setwd(outFolder)
#===============================================================================
#     Generate box-plot and bar-plot
#===============================================================================
targets <- annData[,target]
targets.colour <- getTargetsColours(targets)
##### Order samples accordingly to investigated groups
dataByGroups <- NULL
targetByGroups <- NULL
colourByGroups <- NULL
expr <- list()
averegeExpr <- NULL
for (i in 1:length(unique(targets))) {
##### Separate samples accordingly to investigated groups
expr.tmp <- gene.expr[ targets %in% unique(sort(targets))[i] ]
averegeExpr <- c(averegeExpr, rep(mean(as.numeric(expr.tmp)), length(expr.tmp)))
colour <- targets.colour[[2]][ targets %in% unique(sort(targets))[i] ]
##### Order samples within each group based on the expression level
expr.tmp <- expr.tmp[order(expr.tmp)]
colour <- colour[order(expr.tmp)]
expr[[i]] <- as.numeric(expr.tmp)
names(expr)[[i]] <- unique(sort(targets))[i]
dataByGroups <- c(dataByGroups, expr.tmp)
targetByGroups <- c(targetByGroups, targets[ targets %in% unique(sort(targets))[i] ])
colourByGroups <- c(colourByGroups, colour)
}
dataByGroups <- unlist(dataByGroups)
dataByGroups
gene.expr.df <- data.frame(targets, as.numeric(gene.expr))
colnames(gene.expr.df) <- c("Group", "Expression")
View(gene.expr.df)
gene.expr.df$Group
order
order[order %in% gene.expr.df$Group]
order %in% gene.expr.df$Group
order <- order[order %in% gene.expr.df$Group]
order
gene.expr.df$Group <- factor(gene.expr.df$Group, levels=order)
p <- plot_ly(gene.expr.df, y= ~Expression, color = ~Group, type = 'box', jitter = 0.3, pointpos = 0, boxpoints = 'all', colors = targets.colour[[1]], width = 800, height = 600) %>%
layout(yaxis = list( title = paste0(gene, "  mRNA expression (z-score)")), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F, legend = list(orientation = 'v', y = 0.5), showlegend=TRUE)
#
p
q()
