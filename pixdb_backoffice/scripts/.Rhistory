rsd <- apply(expData.subset,1,sd)
dim(expData.subset)
ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
##### Read file with expression data
expData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
dim(expData)
rownames(expData) = make.names(expData$Gene.name, unique=TRUE)
expData <- expData[,-1]
dim(expData)
selected_samples <- intersect(as.character(annData$File_name),colnames(expData))
selected_samples
head(annData$File_name)
head(colnames(expData))
q()
heatmaply
library(heatmaply)
heatmaply
heatmaply
q()
##### Clear workspace
rm(list=ls())
##### Close any open graphics devices
graphics.off()
#===============================================================================
#    Functions
#===============================================================================
##### Create 'not in' operator
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
##### Assign colours to analysed groups
getTargetsColours <- function(targets) {
##### Predefined selection of colours for groups
targets.colours <- c("red","blue","green","darkgoldenrod","darkred","deepskyblue", "coral", "cornflowerblue", "chartreuse4", "bisque4", "chocolate3", "cadetblue3", "darkslategrey", "lightgoldenrod4", "mediumpurple4", "orangered3","indianred1","blueviolet","darkolivegreen4","darkgoldenrod4","firebrick3","deepskyblue4", "coral3", "dodgerblue1", "chartreuse3", "bisque3", "chocolate4", "cadetblue", "darkslategray4", "lightgoldenrod3", "mediumpurple3", "orangered1")
f.targets <- factor(targets)
vec.targets <- targets.colours[1:length(levels(f.targets))]
targets.colour <- rep(0,length(f.targets))
for(i in 1:length(f.targets))
targets.colour[i] <- vec.targets[ f.targets[i]==levels(f.targets)]
return( list(vec.targets, targets.colour) )
}
#===============================================================================
#    Load libraries
#===============================================================================
suppressMessages(library(plotly))
suppressMessages(library(optparse))
expFile="gene_exp.csv "
annFile="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/icgc/gea_target.txt"
target=Target
target="Target"
PC1=1
PC2 <- PC1 + 1
PC3 <- PC1 + 2
outFolder="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/icgc"
# splitting exp_file string to retrieve all the identified samples
exp_files = unlist(strsplit(expFile, ","))
##### Read sample annotation file
annData <- read.table(annFile,sep="\t",as.is=TRUE,header=TRUE)
annData$File_name <- make.names(annData$File_name)
dim(annData)
j=1
ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
##### Read file with expression data
expData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
expFile
expFile="gene_exp.csv"
exp_files = unlist(strsplit(expFile, ","))
ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
##### Read file with expression data
expData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
dim(expData)
head(expData)
rownames(expData) = make.names(expData$Gene.name, unique=TRUE)
expData <- expData[,-1]
View(expData)
dim(expData)
selected_samples <- intersect(as.character(annData$File_name),colnames(expData))
length(selected_samples)
head(annData$File_name)
head(colnames(expData))
q()
##### Clear workspace
rm(list=ls())
##### Close any open graphics devices
graphics.off()
### Setting environment for pandoc
Sys.setenv(HOME = "")
#===============================================================================
#    Functions
#===============================================================================
##### Create 'not in' operator
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
##### Prepare object to write into a file
prepare2write <- function (x) {
x2write <- cbind(rownames(x), x)
colnames(x2write) <- c("",colnames(x))
return(x2write)
}
##### Decide which copy-number status to assign for each gene
decide.cn.status <- function (x) {
x <- as.numeric(x)
##### assign status different then '0' only to genes with at least 70% of samples with some copy-number alteration
if ( table(x)[ names(table(x))==0 ]/length(x) < 0.7  ) {
##### Select the most frequent alteration
cn.status <- names(sort(table(x)[ !(names(table(x))==0)], decreasing = TRUE))[1]
} else {
cn.status <- "0"
}
return(cn.status)
}
#===============================================================================
#    Load libraries
#===============================================================================
suppressMessages(library(plotly))
suppressMessages(library(Biobase))
suppressMessages(library(optparse))
suppressMessages(library(biomaRt))
cnFile="cn_binary.csv"
annFile="cn_target.txt"
target="Target"
outFolder="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/genie"
cn_files = unlist(strsplit(cnFile, ","))
##### Read sample annotation file
annData <- read.table( paste(outFolder,annFile,sep = "/"),sep="\t",as.is=TRUE,header=TRUE)
annData$Sample_Name <- make.names(annData$Sample_Name)
j=1
head(annData)
ef = paste(outFolder,"norm_files",cn_files[j],sep = "/")
##### Read file with copy-number data
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
rownames(cnData) = make.names(cnData$Gene.name, unique=TRUE)
cnData <- cnData[,-1]
dim(cnData)
head(cnData)
dim(cnData)
###### Check samples present in current dataset
selected_samples <- intersect(as.character(annData$Sample_Name),colnames(cnData))
cnData.subset <- cnData[,colnames(cnData) %in% selected_samples]
##### Make sure that the sample order is the same as in the target file
cnData.subset <- cnData.subset[ , selected_samples ]
targets <- subset(annData, Sample_Name %in% colnames(cnData.subset))[,target]
##### Access Ensembl BioMart
mart = useMart(biomart = "ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host = "jul2015.archive.ensembl.org")
#listFilters(mart)
#listAttributes(mart)
dim(cnData.subset)
head(cnData.subset)
targets
dim(cnData.subset)
###### Set filters and attributes for BioMart
theFilters = c("hgnc_symbol", "chromosome_name")
theAttributes = c("hgnc_symbol", "chromosome_name","start_position","end_position")
###### Retrieve the gene annotation
annot <- getBM(attributes=theAttributes,filters=theFilters,values=list(rownames(cnData.subset), c(1:22,"X","Y")),mart=mart)
###### remove duplicated genes
annot <- annot[!duplicated(annot["hgnc_symbol"]),]
dim(annot)
head(annot)
###### Get genes present in the data and annotation object
annot_genes <- intersect(annot$hgnc_symbol,rownames(cnData.subset))
cnData.subset <- cnData.subset[rownames(cnData.subset) %in% annot_genes, ]
annot <- annot[ annot$hgnc_symbol %in% annot_genes, ]
rownames(annot) <- annot$hgnc_symbol
annot <- annot[,-1]
##### Make sure that the genes order is the same as in the annotation object
cnData.subset <- cnData.subset[ rownames(annot), ]
##### Calculate the per-gene copy-number for each group
cnData.subset.status <- annot
dim(cnData.subset.status)
heac(cnData.subset.status)
head(cnData.subset.status)
i=1
##### Select samples from the group
target.sel <- unique(targets, decreasing = TRUE)[i]
cnData.subset.sel <- cnData.subset[ ,targets %in%  unique(targets)[i] ]
##### Decide which copy-number status to assign for each gene
cnData.subset.sel.status <- as.data.frame(apply(cnData.subset.sel, 1, decide.cn.status))
colnames(cnData.subset.sel.status) <- target.sel
##### Create gene-annotated matrix with PER-GROUP copy-number status
cnData.subset.status <- cbind(cnData.subset.status, cnData.subset.sel.status)
head( cnData.subset.status)
dim( cnData.subset.status)
##### Generate histogram to get an idea about the frequency copy-number status across ALL GROUPS
p <- plot_ly(x = ~unlist(cnData.subset.status[,-c(1:3)]), type = 'histogram', width = 800, height = 500) %>%
layout(xaxis = list( title = "Per-gene copy-number values across groups"), yaxis = list( title = "Frequency"), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F)
p
##### Calculate the per-gene copy-number for each group
cnData.subset.status <- annot
for (i in 1:length(unique(targets))) {
##### Select samples from the group
target.sel <- unique(targets, decreasing = TRUE)[i]
cnData.subset.sel <- cnData.subset[ ,targets %in%  unique(targets)[i] ]
##### Decide which copy-number status to assign for each gene
cnData.subset.sel.status <- as.data.frame(apply(cnData.subset.sel, 1, decide.cn.status))
colnames(cnData.subset.sel.status) <- target.sel
##### Create gene-annotated matrix with PER-GROUP copy-number status
cnData.subset.status <- cbind(cnData.subset.status, cnData.subset.sel.status)
}
i
target.sel <- unique(targets, decreasing = TRUE)[i]
target.sel
cnData.subset.sel <- cnData.subset[ ,targets %in%  unique(targets)[i] ]
head( cnData.subset.sel)
head(cnData.subset)
cnData.subset.sel <- as.datam.frame(cnData.subset[ ,targets %in%  unique(targets)[i] ])
cnData.subset.sel <- as.data.frame(cnData.subset[ ,targets %in%  unique(targets)[i] ])
head(cnData.subset.sel)
cnData.subset.sel.status <- as.data.frame(apply(cnData.subset.sel, 1, decide.cn.status))
colnames(cnData.subset.sel.status) <- target.sel
q()
current_dir <- getwd()
suppressMessages(source(paste(current_dir,"scripts/bcntb.functions.R",sep = "/")))
suppressMessages(library(estimate))
suppressMessages(library(optparse))
suppressMessages(source("/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/scripts/bcntb.functions.R"))
suppressMessages(library(estimate))
suppressMessages(library(optparse))
ann.data <- read.table(file = "/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/E-GEOD-63124_28092686/target.txt")
ann.data <- read.table(file = "/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/E-GEOD-63124_28092686/target.txt", header = T, sep = "\t")
ann.data.splitted <- split(ann.data, ann.data$Target)
head(ann.data.splitted)
exp_files = unlist(strsplit("/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/E-GEOD-63124_28092686/norm_files/63124_1.processed.genename.csv", ","))
exp_files
tumor_purity_df <- data.frame("File_name"=character(), "TumorPurity"=numeric())
tumor_purity_df
tumor_purity_full_df <- data.frame("File_name"=character(),
"StromalScore"=numeric(),
"ImmuneScore"=numeric(),
"ESTIMATEScore"=numeric(),
"TumorPurity"=numeric()
)
j=1
ef = paste(opt$dir,"norm_files",exp_files[j],sep = "/")
exp.data <- read.table(file = ef, header = T, sep = "\t", stringsAsFactors = FALSE, row.names = NULL)
exp_files
dir="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/E-GEOD-63124_28092686"
ef = paste(dir,"norm_files",exp_files[j],sep = "/")
ef
exp.data <- read.table(file = ef, header = T, sep = "\t", stringsAsFactors = FALSE, row.names = NULL)
exp_files = unlist(strsplit(63124_1.processed.genename.csv, ","))
exp_files = unlist(strsplit("63124_1.processed.genename.csv", ","))
exp.data <- read.table(file = ef, header = T, sep = "\t", stringsAsFactors = FALSE, row.names = NULL)
ef
ef = paste(opt$dir,"norm_files",exp_files[j],sep = "/")
exp.data <- read.table(file = ef, header = T, sep = "\t", stringsAsFactors = FALSE, row.names = NULL)
ef
exp_files
ef
ef = paste(dir,"norm_files",exp_files[j],sep = "/")
ef
exp.data <- read.table(file = ef, header = T, sep = "\t", stringsAsFactors = FALSE, row.names = NULL)
View(exp.data)
length(as.character(ann.data.splitted$cancer$File_name)) > 0
ann.data.splitted$cancer$File_name
ann.data.splitted
ann.data <- read.table(file = "/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/E-GEOD-63124_28092686/target_for_estimate.txt, header = T, sep = "\t")
ann.data <- read.table(file = "/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/E-GEOD-63124_28092686/target_for_estimate.txt", header = T, sep = "\t")
ann.data.splitted <- split(ann.data, ann.data$Target)
ann.data.splitted
# creating tumor purity dataframe (useful for updating the final target file) -- empty for now
tumor_purity_df <- data.frame("File_name"=character(), "TumorPurity"=numeric())
# creating tumor purity dataframe full (useful for creating interactive plots) -- empty for now
tumor_purity_full_df <- data.frame("File_name"=character(),
"StromalScore"=numeric(),
"ImmuneScore"=numeric(),
"ESTIMATEScore"=numeric(),
"TumorPurity"=numeric()
)
length(as.character(ann.data.splitted$cancer$File_name)) > 0
for (j in 1:length(exp_files)) {
ef = paste(opt$dir,"norm_files",exp_files[j],sep = "/")
exp.data <- read.table(file = ef, header = T, sep = "\t", stringsAsFactors = FALSE, row.names = NULL)
### Apply 'Estimate' calculations just to cancer group ###
if (length(as.character(ann.data.splitted$cancer$File_name)) > 0) {
selected_samples <- intersect(as.character(ann.data.splitted$cancer$File_name),colnames(exp.data))
exp.data.category.subset <- as.data.frame(t(scale(t(data.matrix(subset(exp.data[,-1], select = selected_samples))))))
rownames(exp.data.category.subset) = exp.data$Entrez.ID
# writing expression data filtered on a tmp file (needed by estimate package)
exp.data.fn = paste(opt$dir,'exp.data.txt',sep="/")
write.table(exp.data.category.subset,file=exp.data.fn,row.names=T,col.names = T,sep="\t",quote=F)
estfile = paste(opt$dir,"/common.genes.estimate.gct",sep="")
scrfile = paste(opt$dir,"/estimate.score.gct",sep="")
filterCommonGenes(exp.data.fn, estfile, id = "EntrezID")
suppressMessages(estimateScore(estfile, output.ds=scrfile))
# Change the output to update the target file and also to improve the output
estimate.output=read.table(file=scrfile,sep="\t",skip=2,header=T,row.names=1)
### updating tumor purity dataframe ###
tmp.purity.df = data.frame('File_name'=colnames(estimate.output[,-1]), 'TumorPurity'=as.numeric(estimate.output[4,-1]))
tumor_purity_df <- rbind(tumor_purity_df, tmp.purity.df)
### updating tumor purity full dataframe ###
tmp.purity.full.df = data.frame('File_name'=colnames(estimate.output[,-1]),
'StromalScore'=round(as.numeric(estimate.output[1,-1]), digits = 2),
'ImmuneScore'=round(as.numeric(estimate.output[2,-1]), digits = 2),
'ESTIMATEScore'=round(as.numeric(estimate.output[3,-1]), digits = 2),
'TumorPurity'=round(as.numeric(estimate.output[4,-1]), digits = 2)
)
tumor_purity_full_df <- rbind(tumor_purity_full_df, tmp.purity.full.df)
}
}
dim(exp.data)
j
selected_samples <- intersect(as.character(ann.data.splitted$cancer$File_name),colnames(exp.data))
exp.data.category.subset <- as.data.frame(t(scale(t(data.matrix(subset(exp.data[,-1], select = selected_samples))))))
rownames(exp.data.category.subset) = exp.data$Entrez.ID
# writing expression data filtered on a tmp file (needed by estimate package)
exp.data.fn = paste(opt$dir,'exp.data.txt',sep="/")
write.table(exp.data.category.subset,file=exp.data.fn,row.names=T,col.names = T,sep="\t",quote=F)
estfile = paste(opt$dir,"/common.genes.estimate.gct",sep="")
scrfile = paste(opt$dir,"/estimate.score.gct",sep="")
filterCommonGenes(exp.data.fn, estfile, id = "EntrezID")
suppressMessages(estimateScore(estfile, output.ds=scrfile))
# Change the output to update the target file and also to improve the output
estimate.output=read.table(file=scrfile,sep="\t",skip=2,header=T,row.names=1)
### updating tumor purity dataframe ###
tmp.purity.df = data.frame('File_name'=colnames(estimate.output[,-1]), 'TumorPurity'=as.numeric(estimate.output[4,-1]))
tumor_purity_df <- rbind(tumor_purity_df, tmp.purity.df)
### updating tumor purity full dataframe ###
tmp.purity.full.df = data.frame('File_name'=colnames(estimate.output[,-1]),
'StromalScore'=round(as.numeric(estimate.output[1,-1]), digits = 2),
'ImmuneScore'=round(as.numeric(estimate.output[2,-1]), digits = 2),
'ESTIMATEScore'=round(as.numeric(estimate.output[3,-1]), digits = 2),
'TumorPurity'=round(as.numeric(estimate.output[4,-1]), digits = 2)
)
tumor_purity_full_df <- rbind(tumor_purity_full_df, tmp.purity.full.df)
selected_samples <- intersect(as.character(ann.data.splitted$cancer$File_name),colnames(exp.data))
exp.data.category.subset <- as.data.frame(t(scale(t(data.matrix(subset(exp.data[,-1], select = selected_samples))))))
rownames(exp.data.category.subset) = exp.data$Entrez.ID
# writing expression data filtered on a tmp file (needed by estimate package)
exp.data.fn = paste(dir,'exp.data.txt',sep="/"))
exp.data.fn = paste(dir,'exp.data.txt',sep="/")
exp.data.fn
write.table(exp.data.category.subset,file=exp.data.fn,row.names=T,col.names = T,sep="\t",quote=F)
estfile = paste(opt$dir,"/common.genes.estimate.gct",sep="")
scrfile = paste(opt$dir,"/estimate.score.gct",sep="")
estfile = pastedir,"/common.genes.estimate.gct",sep="")
estfile = paste(dir,"/common.genes.estimate.gct",sep="")
scrfile = paste(dir,"/estimate.score.gct",sep="")
filterCommonGenes(exp.data.fn, estfile, id = "EntrezID")
suppressMessages(estimateScore(estfile, output.ds=scrfile))
# Change the output to update the target file and also to improve the output
estimate.output=read.table(file=scrfile,sep="\t",skip=2,header=T,row.names=1)
tmp.purity.df = data.frame('File_name'=colnames(estimate.output[,-1]), 'TumorPurity'=as.numeric(estimate.output[4,-1]))
tumor_purity_df <- rbind(tumor_purity_df, tmp.purity.df)
### updating tumor purity full dataframe ###
tmp.purity.full.df = data.frame('File_name'=colnames(estimate.output[,-1]),
'StromalScore'=round(as.numeric(estimate.output[1,-1]), digits = 2),
'ImmuneScore'=round(as.numeric(estimate.output[2,-1]), digits = 2),
'ESTIMATEScore'=round(as.numeric(estimate.output[3,-1]), digits = 2),
'TumorPurity'=round(as.numeric(estimate.output[4,-1]), digits = 2)
)
tumor_purity_full_df <- rbind(tumor_purity_full_df, tmp.purity.full.df)
View(tumor_purity_full_df)
estimate.report.filename = paste(opt$dir, 'estimate.report', sep = "/")
#### writing estimate into file
estimate.report = tumor_purity_full_df[complete.cases(tumor_purity_full_df),] # removing rows with NA value
estimate.report.file = write.table(estimate.report, file = estimate.report.filename, sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
estimate.report.filename = paste(dir, 'estimate.report', sep = "/")
#### writing estimate into file
estimate.report = tumor_purity_full_df[complete.cases(tumor_purity_full_df),] # removing rows with NA value
estimate.report.file = write.table(estimate.report, file = estimate.report.filename, sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
#write out tumour purity to target file
ann.data.updated <- merge(ann.data, tumor_purity_df, by.x = "File_name", all=TRUE)
write.table(ann.data.updated, file="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/E-GEOD-63124_28092686/target_for_estimate.txt", sep = '\t', col.names = TRUE, row.names = FALSE, quote = FALSE, eol = '\n')
ann.data.updated <- merge(ann.data, tumor_purity_df, by.x = "File_name", all=TRUE)
dim(ann.data)
head(ann.data)
dim(tumor_purity_df)
head(tumor_purity_df)
print(dim(ann.data))
print(dim(tumor_purity_df))
q()
##### Create 'not in' operator
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
##### Assign colours to analysed groups (for plots filling)
getTargetsColours <- function(targets) {
##### Predefined selection of colours for groups
targets.colours <- c("red","blue","green","darkgoldenrod","darkred","deepskyblue", "coral", "cornflowerblue", "chartreuse4", "bisque4", "chocolate3", "cadetblue3", "darkslategrey", "lightgoldenrod4", "mediumpurple4", "orangered3","indianred1","blueviolet","darkolivegreen4","darkgoldenrod4","firebrick3","deepskyblue4", "coral3", "dodgerblue1", "chartreuse3", "bisque3", "chocolate4", "cadetblue", "darkslategray4", "lightgoldenrod3", "mediumpurple3", "orangered1")
f.targets <- factor(targets)
vec.targets <- targets.colours[1:length(levels(f.targets))]
targets.colour <- rep(0,length(f.targets))
for(i in 1:length(f.targets))
targets.colour[i] <- vec.targets[ f.targets[i]==levels(f.targets)]
return( list(vec.targets, targets.colour) )
}
#===============================================================================
#    Load libraries
#===============================================================================
suppressMessages(library(plotly))
suppressMessages(library(optparse))
expFile = "/Library/WebServer/Documents/PIXdb/pixdb_backoffice/data/E-MEXP-1243_18596959/norm_files/1243_1.processed.genename.csv"
annFile="/Library/WebServer/Documents/PIXdb/pixdb_backoffice/data/E-MEXP-1243_18596959/target.txt"
target="Target"
gene="SAMD11"
outFolder="/Library/WebServer/Documents/PIXdb/pixdb_backoffice/tmp"
hexcode="mvez8d"
gene = make.names(gene)
gene
exp_files = unlist(strsplit(expFile, ","))
exp_files
##### Read sample annotation file
annData <- read.table(annFile,sep="\t",as.is=TRUE,header=TRUE)
annData$File_name <- make.names(annData$File_name)
View(annData)
q()
##### Clear workspace
rm(list=ls())
##### Close any open graphics devices
graphics.off()
#===============================================================================
#    Functions
#===============================================================================
##### Create 'not in' operator
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
##### Assign colours to analysed groups
getTargetsColours <- function(targets) {
##### Predefined selection of colours for groups
targets.colours <- c("red","blue","green","darkgoldenrod","darkred","deepskyblue", "coral", "cornflowerblue", "chartreuse4", "bisque4", "chocolate3", "cadetblue3", "darkslategrey", "lightgoldenrod4", "mediumpurple4", "orangered3")
f.targets <- factor(targets)
vec.targets <- targets.colours[1:length(levels(f.targets))]
targets.colour <- rep(0,length(f.targets))
for(i in 1:length(f.targets))
targets.colour[i] <- vec.targets[ f.targets[i]==levels(f.targets)]
return( list(vec.targets, targets.colour) )
}
##### Deal with the duplicated genes
duplGenes <- function(expData) {
genesList <- NULL
genesRepl <- NULL
for ( i in 1:nrow(expData) ) {
geneName <- expData[i,1]
##### Distingish duplicated genes by adding duplicate number
if ( geneName %in% genesList ) {
##### Report genes with more than one duplicates
if ( geneName %in% names(genesRepl) ) {
genesRepl[[ geneName ]] = genesRepl[[ geneName ]]+1
geneName <- paste(geneName, ".", genesRepl[[ geneName ]], sep="")
} else {
genesRepl[[ geneName ]] <- 2
geneName <- paste(geneName, ".2", sep="")
}
}
genesList <- c(genesList,geneName)
}
rownames(expData) <- genesList
##### Remove the first column with gene names, which now are used as row names
expData <- expData[, -1]
return(expData)
}
#===============================================================================
#    Load libraries
#===============================================================================
suppressMessages(library(plotly))
suppressMessages(library(optparse))
expFile="1243_1.processed.genename.csv"
annFile="/Library/WebServer/Documents/PIXdb/pixdb_backoffice/data/E-MEXP-1243_18596959/target.txt"
target="Target"
PC1=1
PC2=2
PC3=3
outFolder="/Library/WebServer/Documents/PIXdb/pixdb_backoffice/data/E-MEXP-1243_18596959"
exp_files="unlist(strsplit(expFile, ","))"
exp_files=unlist(strsplit(expFile, ","))
exp_files
annData <- read.table(annFile,sep="\t",as.is=TRUE,header=TRUE)
length(exp_files)
i=1
ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
##### Read file with expression data
expData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
j=1
ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
##### Read file with expression data
expData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
View(expData)
##### Deal with the duplicated genes
expData <- duplGenes(expData)
selected_samples <- intersect(as.character(annData$File_name),colnames(expData))
expData.subset <- as.data.frame(t(scale(t(data.matrix(expData[,colnames(expData) %in% selected_samples])))))
annData.subset <- annData[annData$File_name %in% selected_samples,]
selected_samples
selected_samples <- intersect(as.character(annData$File_name),colnames(expData))
colnames(expData)
as.character(annData$File_name)
q()
setwd("/Library/WebServer/Documents/PIXdb/pixdb_backoffice/scripts")
current_dir <- getwd()
suppressMessages(source(paste(current_dir,"bcntb.functions.R",sep = "/")))
suppressMessages(library(estimate))
suppressMessages(library(optparse))
ann.data <- read.table(file = "/Library/WebServer/Documents/PIXdb/pixdb_backoffice/data/E-MEXP-1243_18596959/target_for_estimate.txt", header = T, sep = "\t")
ann.data$File_name <- make.names(ann.data$File_name)
View(ann.data)
ann.data.splitted <- split(ann.data, ann.data$Target)
nn.data.splitted
ann.data.splitted
exp_files = unlist(strsplit("1243_1.processed.genename.csv", ","))
# creating tumor purity dataframe (useful for updating the final target file) -- empty for now
tumor_purity_df <- data.frame("File_name"=character(), "TumorPurity"=numeric())
# creating tumor purity dataframe full (useful for creating interactive plots) -- empty for now
tumor_purity_full_df <- data.frame("File_name"=character(),
"StromalScore"=numeric(),
"ImmuneScore"=numeric(),
"ESTIMATEScore"=numeric(),
"TumorPurity"=numeric()
)
tumor_purity_full_df
j=1
ef = paste("/Library/WebServer/Documents/PIXdb/pixdb_backoffice/data/E-MEXP-1243_18596959","norm_files",exp_files[j],sep = "/")
ef
exp.data <- read.table(file = ef, header = T, sep = "\t", stringsAsFactors = FALSE, row.names = NULL)
View(exp.data)
length(as.character(ann.data.splitted$cancer$File_name)) > 0
q()
