f.targets <- factor(targets)
vec.targets <- targets.colours[1:length(levels(f.targets))]
targets.colour <- rep(0,length(f.targets))
for(i in 1:length(f.targets))
targets.colour[i] <- vec.targets[ f.targets[i]==levels(f.targets)]
return( list(vec.targets, targets.colour) )
}
################################################################################
#    Load libraries
################################################################################
library(affy)
library(sva)
library(arrayQualityMetrics)
library(gcrma)
#library(affyPLM)
#library(arrayMvout)
#library(hgu133acdf)
#library(limma)
#library(hgu133plus2.db)
##### Source script for coloured dendrogram
source("/Users/marzec01/Desktop/others/workshops/Lechu_Slowacja_bix_workshop_08_2016/workshop/scripts/a2R_code.R")
source("https://bioconductor.org/biocLite.R")
biocLite("sva")
library(sva)
library(sva)
source("https://bioconductor.org/biocLite.R")
biocLite("sva")
source("https://bioconductor.org/biocLite.R")
biocLite("sva")
library(sva)
nstall.packages("mgcv", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("mgcv", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("mgcv", lib = "/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(sva)
source("https://bioconductor.org/biocLite.R")
biocLite("sva")
library(sva)
source("https://bioconductor.org/biocLite.R")
biocLite("sva" , lib = "/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(sva)
library(sva)
source("https://bioconductor.org/biocLite.R")
biocLite("sva" , lib = "/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("mgcv")
source("https://bioconductor.org/biocLite.R")
biocLite("sva")
library(sva)
install.packages("mgcv")
library(sva)
library(survival)
data(pbc)
head(pbc)
pbc<-pbc[!is.na(pbc$trt),] # select only randomised subjects
pbc$status<-as.numeric(pbc$status==2) # create event indicator: 1 for death, 0 for censored
# we evaluate bilirubin as a prognostic biomarker for death.
# 1) with the Kaplan-Meier estimator for computing the weights (default).
ROC.bili.marginal<-timeROC(T=pbc$time,
delta=pbc$status,marker=pbc$bili,
cause=1,weighting="marginal",
times=quantile(pbc$time,probs=seq(0.2,0.8,0.1)),
iid=TRUE)
ROC.bili.marginal
library(timeROC)
install.packages("timeROC")
library(timeROC)
pbc<-pbc[!is.na(pbc$trt),] # select only randomised subjects
pbc$status<-as.numeric(pbc$status==2) # create event indicator: 1 for death, 0 for censored
# we evaluate bilirubin as a prognostic biomarker for death.
# 1) with the Kaplan-Meier estimator for computing the weights (default).
ROC.bili.marginal<-timeROC(T=pbc$time,
delta=pbc$status,marker=pbc$bili,
cause=1,weighting="marginal",
times=quantile(pbc$time,probs=seq(0.2,0.8,0.1)),
iid=TRUE)
ROC.bili.marginal
ROC.bili.marginal
ROC.bili.cox<-timeROC(T=pbc$time,
delta=pbc$status,marker=pbc$bili,
other_markers=as.matrix(pbc[,c("chol","albumin")]),
cause=1,weighting="cox",
times=quantile(pbc$time,probs=seq(0.2,0.8,0.1)))
ROC.bili.cox
data(Melano)
ROC.thick<-timeROC(T=Melano$time,delta=Melano$status,
weighting="aalen",
marker=Melano$thick,cause=1,
times=c(1800,2000,2200))
ROC.thick
ROC.DSST<-timeROC(T=Paquid$time,delta=Paquid$status,
marker=-Paquid$DSST,cause=1,
weighting="cox",
other_markers=as.matrix(Paquid$MMSE),
times=c(3,5,10),ROC=TRUE)
ROC.DSST
plot(ROC.DSST,time=5)
data(Paquid)
ROC.DSST<-timeROC(T=Paquid$time,delta=Paquid$status,
marker=-Paquid$DSST,cause=1,
weighting="cox",
other_markers=as.matrix(Paquid$MMSE),
times=c(3,5,10),ROC=TRUE)
ROC.DSST
plot(ROC.DSST,time=5)
q()
setwd("/Users/marzec01/Desktop/git/data_portal/mRNA")
##### Prepare object to write into a file
prepare2write <- function (x) {
x2write <- cbind(rownames(x), x)
colnames(x2write) <- c("",colnames(x))
return(x2write)
}
##### Create 'not in' operator
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
##### Deal with the duplicated genes
duplGenes <- function(expData) {
genesList <- NULL
genesRepl <- NULL
for ( i in 1:nrow(expData) ) {
geneName <- expData[i,1]
##### Distingish duplicated genes by adding duplicate number
if ( geneName %in% genesList ) {
##### Report genes with more than one duplicates
if ( geneName %in% names(genesRepl) ) {
genesRepl[[ geneName ]] = genesRepl[[ geneName ]]+1
geneName <- paste(geneName, "-", genesRepl[[ geneName ]], sep="")
} else {
genesRepl[[ geneName ]] <- 2
geneName <- paste(geneName, "-2", sep="")
}
}
genesList <- c(genesList,geneName)
}
rownames(expData) <- genesList
##### Remove the first column with gene names, which now are used as row names
expData <- expData[, -1]
return(expData)
}
#===============================================================================
#    Load libraries
#===============================================================================
library(gplots)
library(plotly)
library(heatmaply)
expFile="CCLE_PC_processed_mRNA.txt"
annFile="CCLE_PC_target.txt"
genesFile="Genes_of_interest.txt"
outFolder="Example_results/PC_GeneCoExprMultGenes"
expData <- read.table(expFile,sep="\t", as.is=TRUE, header=TRUE, row.names=NULL)
##### Deal with the duplicated genes
expData <- duplGenes(expData)
coreName <- strsplit(expFile, "/")
coreName <- coreName[[1]][length(coreName[[1]])]
##### Read sample annotation file
annData <- read.table(annFile,sep="\t",as.is=TRUE,header=TRUE,row.names=1)
rownames(annData) <- gsub("-", ".", rownames(annData))
##### Keep only samples with annotation info
expData <- expData[,colnames(expData) %in% rownames(annData)]
annData <- subset(annData, rownames(annData) %in% colnames(expData))
##### Make sure that the samples order in the data matrix and annotation file is the same
annData <- annData[colnames(expData),]
group="ductal carcinoma"
dim(expData)
group %in% annData[,2]
dim(annData)
expData <- expData[, annData[,2] %in% group ]
annData <- annData[ annData[,2] %in% group, ]
dim(expData)
dim(annData)
genes <- unlist(read.table(genesFile,sep="\t",as.is=TRUE,header=FALSE))
genes
length(genes)
length(genes) > 5
gene %!in% rownames(expData)
gene
i in 1:length(genes)
1:length(genes)
i=1
genes[1]
genes[1] %!in% rownames(expData)
genes
genes <- genes[-i]
genes
##### Check if the queried genes are present in the expression data
for ( i in 1:length(genes) ) {
if ( genes[1] %!in% rownames(expData) ) {
cat("The gene/probe", gene, "is not present in the data!", sep=" ")
genes <- genes[-i]
}
}
genes
genes[genes %!in% rownames(expData)]
genes[i] %!in% rownames(expData)
genes
##### Set/create a directory for the output files
if (file.exists(outFolder)){
cat( paste("The output folder already exists. Writing files to the", outFolder, "\n", sep = " ") )
} else {
dir.create(outFolder, recursive = TRUE);
cat( paste("Writing files to the", outFolder, "\n", sep = " ") )
}
##### Report genes of interest not present in the expression matrix
if ( length(absentGenes) > 0 ) {
write(absentGenes, file = paste(coreName, gene, "absent_genes.txt", sep = "_"), append = FALSE, sep="\t")
}
absentGenes <- genes[genes %!in% rownames(expData)]
getwd()
##### Change working directory to the project workspace
setwd(outFolder)
##### Report genes of interest not present in the expression matrix
if ( length(absentGenes) > 0 ) {
write(absentGenes, file = paste(coreName, gene, "absent_genes.txt", sep = "_"), append = FALSE, sep="\t")
}
rsd<-apply(expData,1,sd)
expData <- expData[rsd>0,]
nrow(expData)
length(genes)
(3*length(genes))-1
(2*length(genes))+1
length(genes)
c("Gene","Correlation", "P-value")
paste(genes, c("Gene","Correlation", "P-value"))
]paste( c("Gene", paste(genes, "Correlation", "P-value")) )
paste( "Gene", paste(genes, "Correlation", "P-value") )
paste( "Gene", c(paste(genes, "Correlation", "P-value")) )
c( "Gene", paste(genes, "Correlation", "P-value") )
c( "Gene", rep(genes, "Correlation", "P-value") )
rep(pates(genes, "Correlation", "P-value"))
rep(paste(genes, "Correlation", "P-value"))
rep(genes, "Correlation", "P-value")
c(genes, "Correlation", "P-value")
rep(genes, "Correlation", "P-value", length(genes))
rep(genes, c("Correlation", "P-value"), length(genes))
paste(genes, c("Correlation", "P-value"))
paste(rep(genes,2), c("Correlation", "P-value"))
rep(genes,2)
paste(rep(genes, each = 2), c("Correlation", "P-value"))
corr.res <- matrix(data = 0, nrow = nrow(expData), ncol = (2*length(genes))+1, dimnames = list( rownames(expData), c( "Gene", paste(rep(genes, each = 2), c("Correlation", "P-value")) ) ))
head(corr.res)
1:length(genes)
genes[i] %!in% rownames(expData)
##### Check if used-defined genes are present in the data
for ( i in 1:length(genes) ) {
if ( genes[i] %!in% rownames(expData) ) {
cat("The genes/probes", genes[i], "are not present in the data!", sep=" ")
genes <- genes[-i]
}
}
head(expData)
as.numeric(expData[genes[i],])
expData[genes[i],]
genes
i
head(corr.res)
corr.res[j, paste0(genes[i], " Correlation")]
j
j=1
corr.res[j, paste0(genes[i], " Correlation")]
paste0(genes[i], " Correlation")
head(corr.res)
corr.res[j, paste0(genes[i], " P-value")]
paste0(genes[i], " P-value")
corr.res[j, paste0(genes[i], " Correlation")] <- cor.test( as.numeric(expData[ genes[i] ,]), as.numeric(expData[ j, ]), method = "pearson" )$estimate;
corr.res[j, paste0(genes[i], " P-value")] <- cor.test( as.numeric(expData[ genes[i] ,]), as.numeric(expData[ j, ]), method = "pearson" )$p.value;
head(corr.res)
expData[ j, ]
cor.test( as.numeric(expData[ genes[i] ,]), as.numeric(expData[ j, ]), method = "pearson" )
##### Calculate Pearson correlation coefficient for user-defined genes
corr.res <- matrix(data = 0, nrow = nrow(expData), ncol = (2*length(genes))+1, dimnames = list( rownames(expData), c( "Gene", paste(rep(genes, each = 2), c("Correlation", "P-value")) ) ))
for ( i in 1:length(genes) ) {
for ( j in 1:nrow(expData) ) {
#### Pearson correlation coefficient and test P
corr.res[j, paste0(genes[i], " Correlation")] <- cor.test( as.numeric(expData[ genes[i] ,]), as.numeric(expData[ j, ]), method = "pearson" )$estimate;
corr.res[j, paste0(genes[i], " P-value")] <- cor.test( as.numeric(expData[ genes[i] ,]), as.numeric(expData[ j, ]), method = "pearson" )$p.value;
}
}
head(corr.res)
tail(corr.res)
corr.res <- data.frame(corr.res)
head(corr.res)
corr.res[,"Gene"] <- rownames(expData)
head(corr.res)
tail(corr.res)
write.table(corr.res, file=paste(coreName, gene, "corr.txt", sep="_"), sep="\t", row.names=FALSE)
write.table(corr.res, file=paste(coreName, "corr.txt", sep="_"), sep="\t", row.names=FALSE)
c( "Gene", paste(rep(genes, each = 2), c("Correlation", "P-value")) )
colnames(corr.res) <- c( "Gene", paste(rep(genes, each = 2), c("Correlation", "P-value")) )
##### Write the results into a file
write.table(corr.res, file=paste(coreName, "corr.txt", sep="_"), sep="\t", row.names=FALSE)
head(corr.res)
corr.res.genes <- corr.res[genes, ]
head(corr.res.genes)
corr.res.genes
head*annData
head(annData)
head(as.matrix(annData[,c(2:ncol(annData))]))
head(expData)
annot <- as.matrix(annData[,c(2:ncol(annData))])
annot
names(annot) <- names(annData)[c(2:ncol(annData))]
annot
annot <- as.matrix(annData[,c(2:ncol(annData))])
annot
,c(2:ncol(annData))
c(2:ncol(annData))
names(annData)
colnames(annot) <- names(annData)[c(2:ncol(annData))]
annot
targets.colour <- getTargetsColours(annData[,2])
corr.res.genes
p <- heatmaply(data.frame(corr.res.genes))
p
corr.res.genes
corr.res.genes <- corr.res[genes, -1]
corr.res.genes
seq(1, length(a), 6)
90
down vote
accepted
a <- 1:120
a <- 1:120
a
b <- a[seq(1, length(a), 6)]
b
paste(rep(genes, each = 2), c("Correlation", "P-value"))
paste(rep(genes, each = 2), "Correlation")
paste(genes, "Correlation")
corr.res.genes <- corr.res[genes, paste(genes, "Correlation")]
corr.res.genes
rownames(corr.res.genes)
colnames(corr.res.genes) <- rownames(corr.res.genes)
corr.res.genes
p <- heatmaply(data.frame(corr.res.genes))
p
p <- heatmaply(data.frame(corr.res.genes), dendrogram="none", colors = colorRampPalette(c("darkblue","darkblue","darkslateblue","darkslateblue","white","firebrick3","firebrick3","firebrick4","firebrick4"))(100), scale="none", trace="none", hide_colorbar = FALSE, fontsize_row = 8, fontsize_col = 8) %>%
layout(autosize = TRUE, width = 800, margin = list(l=150, r=50, b=150, t=50, pad=4), showlegend = FALSE)
p
##### Report top positively correlated genes
p <- heatmaply(data.frame(corr.res.genes), dendrogram="none", colors = colorRampPalette(c("darkblue","darkblue","darkslateblue","darkslateblue","white","firebrick3","firebrick3","firebrick4","firebrick4"))(100), scale="none", trace="none", hide_colorbar = FALSE, fontsize_row = 8, fontsize_col = 8) %>%
layout(autosize = TRUE, width = 800, margin = list(l=150, r=50, b=150, t=50, pad=4), showlegend = FALSE)
##### Save the heatmap as html (PLOTLY)
htmlwidgets::saveWidget(as_widget(p), paste(coreName, "corr_heatmap.html", sep = "_"))
coreName <- strsplit(expFile, "/")
coreName
dim(expData)
expData <- expData[ rownames(expData) %in% genes, ]
dim(expData)
expData
##### Remove gense with standard deviation = 0 (otherwise the cor.test complains)
#####  Keep only genes/probes with variance > 0 across all samples (otherwise the cor.test complains)
rsd<-apply(expData,1,sd)
expData <- expData[rsd>0,]
##### Check if used-defined genes are present in the data
for ( i in 1:length(genes) ) {
if ( genes[i] %!in% rownames(expData) ) {
cat("The genes/probes", genes[i], "are not present in the data!", sep=" ")
genes <- genes[-i]
}
}
##### Calculate Pearson correlation coefficient for user-defined genes
corr.res <- matrix(data = 0, nrow = nrow(expData), ncol = (2*length(genes))+1, dimnames = list( rownames(expData), c( "Gene", paste(rep(genes, each = 2), c("Correlation", "P-value")) ) ))
for ( i in 1:length(genes) ) {
for ( j in 1:nrow(expData) ) {
#### Pearson correlation coefficient and test P
corr.res[j, paste0(genes[i], " Correlation")] <- cor.test( as.numeric(expData[ genes[i] ,]), as.numeric(expData[ j, ]), method = "pearson" )$estimate;
corr.res[j, paste0(genes[i], " P-value")] <- cor.test( as.numeric(expData[ genes[i] ,]), as.numeric(expData[ j, ]), method = "pearson" )$p.value;
}
}
corr.res <- data.frame(corr.res)
corr.res[,"Gene"] <- rownames(expData)
colnames(corr.res) <- c( "Gene", paste(rep(genes, each = 2), c("Correlation", "P-value")) )
corr.res
getwd()
geneName
geneName <- APC
geneName <- "APC"
genesList <- c("APCA", "APD")
geneName %in% genesList
genesList <- c("APCA", "APD", "APC")
geneName %in% genesList
q()
USPersonalExpenditure <- data.frame("Categorie" = rownames(USPersonalExpenditure), USPersonalExpenditure)
USPersonalExpenditure <- data.frame("Categorie" = rownames(USPersonalExpenditure), USPersonalExpenditure)
USPersonalExpenditure
Technology <- c("RNA-seq", "RNA-seq (Survival)", "Microarray", "Microarray (Survival)")
Technology
Counts <- c(247-51, 51, 1963-394, 394)
Counts
data <- data.frame("Technology" = Technology, Counts = "Counts")
data
data <- data.frame("Technology" = Technology, "Counts" = Counts)
data
colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)')
p <- plot_ly(data, labels = ~Technology, values = ~Counts, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', X1960, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(plotly)
p <- plot_ly(data, labels = ~Technology, values = ~Counts, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', X1960, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
p <- plot_ly(data, labels = ~Technology, values = ~Counts, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'Sample distribution by data type',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)')
p <- plot_ly(data, labels = ~Technology, values = ~Counts, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'Sample distribution by data type',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(114,147,203)')
p <- plot_ly(data, labels = ~Technology, values = ~Counts, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'Sample distribution by data type',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
data
colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(114,147,203)', 'rgb(144,103,167)')
p <- plot_ly(data, labels = ~Technology, values = ~Counts, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'Sample distribution by data type',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
colors <- c('rgb(171,104,87)', 'rgb(128,133,133)', 'rgb(114,147,203)', 'rgb(144,103,167)')
p <- plot_ly(data, labels = ~Technology, values = ~Counts, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'Sample distribution by data type',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
getwd()
setwd("/Users/marzec01/biomart/PED_bioinformatics_portal/ped_proto/pages/")
##### Save the box-plot as html (PLOTLY)
htmlwidgets::saveWidget(as_widget(p), "DataStats_pie.html")
colors <- c('rgb(171,104,87)', 'rgb(128,133,133)', 'rgb(114,147,203)', 'rgb(144,103,167)')
p <- plot_ly(data, labels = ~Technology, values = ~Counts, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste(Counts, " samples"),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'Sample distribution by data type',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
##### Save the pie chart as html (PLOTLY)
htmlwidgets::saveWidget(as_widget(p), "DataStats_pie.html")
p
q()
